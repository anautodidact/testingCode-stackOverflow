<html>
<body>
<p id="output">Output text here after custom object's setTimeOut has expired.</p>
<p id="outputTwo">This is the output for the nonworking code.</p>
</body>
<script>
function sal_clock2 () {
	this.initialized = false;
	var aTimerObject = {timerStarted: false};
	this.holdTimers = [];
	var mythis = this; //this allows me to access this functions' variables from inside anonymous functions (where the this keyword is a different context)
	this.checkIfNotInit = function(index) {
		if (typeof this.holdTimers[index] === "undefined") { //if timer doesn't exist then create it.
		this.holdTimers[index] = {timerStarted: false};
   		}
	};
	this.setTimeout = function(runFunction, millisecondsDelay) { //this works
		var IDofTimer = setTimeout(function(){document.getElementById('output').innerHTML="Timer expired";}, millisecondsDelay);
		return IDofTimer; //returning IDofTimer so that I can reference it later to stop timer if necessary.
	};
	this.setTimeoutTest = function(runFunction, millisecondsDelay) { //this doesn't work
		var IDofTimer = setTimeout(runFunction(), millisecondsDelay); //function(){mythis.holdTimers[runFunction].timerStarted = false;}
		return IDofTimer;
	}; //end this.setTimeOut
}

var t = new sal_clock2(); //creating a timer object
var i = 0; 

t.checkIfNotInit(i); //this successfully sets up variable so that I don't have to check for undefined.

if (t.holdTimers[i].timerStarted == false) { 
	t.setTimeout(i,3000); //this works
	t.setTimeoutTest(function(){t.holdTimers[i].timerStarted = false;}, 3000); //this doesn't work
	t.holdTimers[i].timerStarted = true;
	console.log(t.holdTimers[t.holdTimers.length-1].timerStarted);
} //end 

</script>
</html>
